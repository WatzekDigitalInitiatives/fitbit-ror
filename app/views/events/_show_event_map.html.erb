<script>
  var directionDisplay;
  var directionsService=new google.maps.DirectionsService();
  var gmarkers = [];
  var map = null;
  var startLocation = null;
  var endLocation = null;
  var waypts = null;
  var infowindow = new google.maps.InfoWindow(
  {
    size: new google.maps.Size(150,50)
  });
  function createMarker(latlng, label, html, color) {
    console.log("latlng"+latlng);
    console.log("label"+label);
    console.log("html"+html);
    console.log("color"+color);
    var contentString = '<b>'+label+'</b><br>'+html;
    var marker = new google.maps.Marker({
        position: latlng,
        map: map,
        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|"+color,
        title: label,
        zIndex: Math.round(latlng.lat()*-100000)<<5
        });
        marker.myname = label;
        gmarkers.push(marker);
    google.maps.event.addListener(marker, 'click', function() {
          infowindow.setContent(contentString);
          infowindow.open(map,marker);
        });
        return marker;
  }
  function initializeShow() {
    directionsDisplay = new google.maps.DirectionsRenderer({preserveViewport: true});
    var portland = new google.maps.LatLng(45.542415,-122.7244614);
    var myOptions = {
      zoom: 6,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      center: portland
    }
    map = new google.maps.Map(document.getElementById(gon.mapArgs["mapID"]), myOptions);
    directionsDisplay.setMap(map);
    calcRoute();
  }
  function calcRoute() {
    var request = {
        origin: gon.mapArgs["origin"],
        destination: gon.mapArgs["destination"],
        optimizeWaypoints: true,
        unitSystem: google.maps.UnitSystem.METRIC,
        travelMode: google.maps.DirectionsTravelMode.WALKING
    };
    directionsService.route(request, function(response, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);
        var route = response.routes[0];
        var totalDistanceStr = route.legs[0].distance["text"];
        var totalDistance = totalDistanceStr.match(/\d/g);
        totalDistance = parseInt(totalDistance.join(""));
        startLocation = new Object();
        endLocation = new Object();
        var polyline = new google.maps.Polyline({
          path: [],
          strokeColor: '#FF0000',
          strokeWeight: 3
        });
        var legs = route.legs;
        for (i=0;i<legs.length;i++) {
          if (i == 0) {
            startLocation.latlng = legs[i].start_location;
            startLocation.address = legs[i].start_address;
          } else {
            waypts[i] = new Object();
            waypts[i].latlng = legs[i].start_location;
            waypts[i].address = legs[i].start_address;
          }
          endLocation.latlng = legs[i].end_location;
          endLocation.address = legs[i].end_address;
          var steps = legs[i].steps;
          for (j=0;j<steps.length;j++) {
            var nextSegment = steps[j].path;
            for (k=0;k<nextSegment.length;k++) {
              polyline.getPath().push(nextSegment[k]);
            }
          }
        }
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < gon.mapArgs["markers"].length; i++) {
          var data = gon.mapArgs["markers"][i];
          var markerDistance = data["total_steps"];
          var color = data["hexcolor"];
          var percentCovered = (markerDistance/(totalDistance*1000))*100;
          var name = data["name"];
          createMarker(polyline.GetPointAtDistance(markerDistance),name+" "+(markerDistance/1000)+"km",percentCovered.toFixed(2)+"% finished", color);
          bounds.extend(polyline.GetPointAtDistance(markerDistance));
        }
        bounds.extend(startLocation.latlng);
        map.fitBounds(bounds);
      }else {
        alert("directions response "+status);
      }
    });
  }
  google.maps.event.addDomListener(window, 'load', initializeShow);
</script>
